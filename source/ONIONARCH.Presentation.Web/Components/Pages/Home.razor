@page "/"
@using Microsoft.Extensions.Options
@using ONIONARCH.Domain.Options

<PageTitle>Home</PageTitle>

<MudButton ButtonType="ButtonType.Button" Color="Color.Info" Variant="Variant.Filled" OnClick="LogInformationTest">Log Information Test</MudButton>
<br />
<br />
<MudButton ButtonType="ButtonType.Button" Color="Color.Warning" Variant="Variant.Filled" OnClick="LogWarningTest">Log Warning Test</MudButton>
<br />
<br />
<MudButton ButtonType="ButtonType.Button" Color="Color.Error" Variant="Variant.Filled" OnClick="LogErrorTest">Log Error Test</MudButton>
<br />
<br />
<MudButton ButtonType="ButtonType.Button" Color="Color.Tertiary" Variant="Variant.Filled" OnClick="LogDebugTest">Log Debug Test</MudButton>
<br />
<br />
<MudButton ButtonType="ButtonType.Button" Color="Color.Surface" Variant="Variant.Filled" OnClick="LogCriticalTest">Log Critical Test</MudButton>
<br />
<br />
<MudButton ButtonType="ButtonType.Button" Color="Color.Dark" Variant="Variant.Filled" OnClick="LogTraceTest">Log Trace Test</MudButton>

@inject ILogger<Program> Logger
@inject IOptions<LogOptions> LogOptions
@code{
    private void LogInformationTest()
    {
        Logger.LogInformation("Log Information Test");
    }

    private void LogWarningTest()
    {
        Logger.LogWarning("Log Warning Test");
    }

    private void LogDebugTest()
    {
        Logger.LogDebug("Log Debug Test");
    }

    private void LogCriticalTest()
    {
        Logger.LogCritical("Log Critical Test");
    }

    private void LogTraceTest()
    {
        Logger.LogTrace("Log Trace Test");
    }

    private void LogErrorTest()
    {
        try
        {
            int i = 0;
            int j = 1;
            _ = j / i;
        }
        catch(DivideByZeroException ex)
        {
            Logger.LogError(ex, "Error Logger Test: {Message}", ex.Message);
        }
    }
}